@page "/ProvidersCatalog"
@using Fruits.Interfaces
@using Fruits.Domain.DB
@inject IFriutServices FriutServices
@inject IJSRuntime Js;

<PageTitle>Поставщики</PageTitle>
<h4 class="mb-0 ms-2">Поставщики</h4>

<hr />

@if (ProviderSelect != null)
{
	<EditForm id="idEditFormProvider" Model="ProviderSelect" OnValidSubmit="EditFormValid">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="d-flex">
			<div class="me-3 flex-fill">
				<label for="validation_ProviderSelect_NameProvider" class="form-label m-0 ms-2">Наименование</label>
				<input id="validation_ProviderSelect_NameProvider" type="text" class="form-control"
				   @bind="ProviderSelect.NameProvider">
			</div>

			<div class="d-flex align-items-center">
				<button type="submit" form="idEditFormProvider" class="btn btn-primary">Сохранить</button>
				<button type="button" class="btn btn-danger ms-2" @onclick="DeleteProviderToDb">Удалить</button>
				<button type="button" class="btn btn-secondary ms-2" @onclick="CloseProviderFormaCancelEdit">Отмена</button>
			</div>
		</div>
	</EditForm>

}
else
{
	<h5 class="mb-0 ms-2">Выберите сроку для редактирования!</h5>
}

<hr />

<button class="btn btn-success" @onclick="AddFruitsToDb" disabled="@(ProviderSelect != null ? true : null)">Добавить</button>

<table class="table @(ProviderSelect == null ? "table-hover" : null)">
	<thead>
		<tr>
			<th>Наименование</th>
		</tr>
	</thead>
	<tbody>
		@if (ListProvidersCatalog != null && ListProvidersCatalog.Any())
		{
			foreach (var item in ListProvidersCatalog)
			{
				<tr class="@(ProviderSelect == item ? "table-secondary" : null)" @onclick="() => EditProviderOpenForma(item)"
				    style="@(ProviderSelect == null ? "cursor: pointer" : null)">
					<td>@item.NameProvider</td>
				</tr>
			}
		}
	</tbody>
</table>

@if (ListProvidersCatalog == null)
{
	<div class="mt-3 mb-3 d-flex justify-content-center align-items-center">
		<strong>Загрузка...</strong>
		<div class="spinner-border ms-2" role="status" aria-hidden="true"></div>
	</div>
}

<PartialError @ref="_refPartialError" />

@code {
	private PartialError? _refPartialError;

	private List<ProvidersCatalog>? ListProvidersCatalog { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await GetProviderData();
		}
	}

	private async Task RefreshMe()
	{
		await InvokeAsync(StateHasChanged);
	}

	#region Get
	private async Task GetProviderData()
	{
		var allProvidersCatalog = await FriutServices.GetAllProvidersCatalog();

		ListProvidersCatalog = allProvidersCatalog.ToList();

		await RefreshMe();
	}
	#endregion


	#region Edit-Add

	private ProvidersCatalog? ProviderSelect { get; set; }

	private async Task EditFormValid()
	{
		await UpdateProviderToDb();
	}

	private void EditProviderOpenForma(ProvidersCatalog provider)
	{
		if (ProviderSelect != null)
		{
			return;
		}

		ProviderSelect = provider;
	}

	private async Task CloseProviderFormaCancelEdit()
	{
		// Возвращаем без сохранения
		if (ProviderSelect != null)
		{
			await FriutServices.UndoChangesItemAsync(ProviderSelect);
		}

		ProviderSelect = null;
		await GetProviderData();
	}

	private async Task AddFruitsToDb()
	{
		ProviderSelect = new ProvidersCatalog();
		ProviderSelect.NameProvider = "Введите имя поставщика!";

		await FriutServices.AddProvidersCatalogAsync(ProviderSelect);
		if (await FriutServices.SaveChangesAsync())
		{
			await GetProviderData();
		}
	}

	private async Task DeleteProviderToDb()
	{
		if (ProviderSelect != null)
		{
			var result = await FriutServices.RemoveProvidersCatalogAsync(ProviderSelect);
				
			if (_refPartialError != null && result.Result == false)
			{
				_refPartialError.ErrorMessage = result.ErrorMessage;
				await Js.InvokeVoidAsync("ToastShow", "idToastError");
				await _refPartialError.RefreshMe();
			}
			else
			{
				if (await FriutServices.SaveChangesAsync())
				{
					ProviderSelect = null;
					await GetProviderData();
				}
			}
		}
	}

	private async Task UpdateProviderToDb()
	{
		if (ProviderSelect != null)
		{
			if (await FriutServices.SaveChangesAsync())
			{
				ProviderSelect = null;
				await GetProviderData();
			}
		}
	}
	#endregion

}
